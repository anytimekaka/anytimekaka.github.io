---
layout:     post
title:      "NoSQL & RDBMS，如何选择"
subtitle:   "本文翻译自Naresh Kumar写于2014年1月的一篇文章——NoSQL vs RDBMS: Why and why not to use NoSQL over RDBMS？这篇文章主要讲述的是NoSQL数据库与关系型数据库之间的差别，同时讨论了在何种场景下应该使用NoSQL，何种场景下不应该使用。"
date:       2015-02-25 18:50:00
author:     "anytimekaka"
header-img: "img/post-bg-06.jpg"
---

本文翻译自Naresh Kumar写于2014年1月的一篇文章——NoSQL vs RDBMS: Why and why not to use NoSQL over RDBMS？这篇文章主要讲述的是NoSQL数据库与关系型数据库之间的差别，同时讨论了在何种场景下应该使用NoSQL，何种场景下不应该使用。

原文请参考：<a href="http://theprofessionalspoint.blogspot.in/2014/01/nosql-vs-rdbms-why-and-why-not-to-use.html">NoSQL vs RDBMS: Why and why not to use NoSQL over RDBMS?</a>

#前言

NoSQL并不是关系型数据库管理系统，本文将会介绍NoSQL数据库与关系型数据库之间的差别，同时还会讨论在何种场景下应该使用NoSQL，何种场景下不应该使用。由于NoSQL还是个相对较新的技术，因此它还面临着很多挑战。

时至今日，互联网上有数以亿计的用户。大数据与云计算已经成为很多主要的互联网应用都在使用或是准备使用的技术，这是因为互联网用户每天都在不断增长，数据也变得越来越复杂，而且有很多**非结构化的数据**存在，这是很难通过传统的关系型数据库管理系统来处理的。NoSQL技术则能比较好地解决这个问题，它主要用于非结构化的大数据与云计算上。从这个角度来看，NoSQL是一种全新的数据库思维方式。

#为何要使用NoSQL数据库？

###一、NoSQL具有灵活的数据模型，可以处理非结构化/半结构化的大数据

<p>现在，我们可以通过Facebook、D&B等第三方轻松获得与访问数据，如个人用户信息、地理位置数据、社交图谱、用户产生的内容、机器日志数据以及传感器生成的数据等。对这些数据的使用正在快速改变着通信、购物、广告、娱乐以及关系管理的特质。没有使用这些数据的应用很快就会被用户所遗忘。**开发者希望使用非常灵活的数据库，能够轻松容纳新的数据类型，并且不会被第三方数据提供商内容结构的变化所累。**</p>

很多新数据都是非结构化或是半结构化的，因此开发者还需要能够高效存储这种数据的数据库。但遗憾的是，**关系型数据库所使用的定义严格、基于模式的方式是无法快速容纳新的数据类型的，对于非结构化或是半结构化的数据更是无能为力。**NoSQL提供的数据模型则能很好地满足这种需求。很多应用都会从这种非结构化数据模型中获益，比如说CRM、ERP、BPM等等，他们可以通过这种灵活性存储数据而无需修改表或是创建更多的列。这些数据库也非常适合于创建原型或是快速应用，因为这种灵活性使得新特性的开发变得非常容易。

2.NoSQL很容易实现可伸缩性（向上扩展与水平扩展）

如果有很多用户在频繁且并发地使用你的应用，那么你就需要考虑可伸缩的数据库技术而非传统的RDBMS了。对于关系型技术来说，很多应用开发者会发现动态的可伸缩性是难以实现的，这时就应该考虑切换到NoSQL数据库上。对于云应用来说，关系型数据库一开始是普遍的选择。然而，在使用过程中却遇到了越来越多的问题，原因就在于他们是中心化的，向上扩展而非水平扩展的。这使得他们不适合于那些需要简单且动态可伸缩性的应用。NoSQL数据库从一开始就是分布式、水平扩展的，因此非常适合于互联网应用分布式的特性。

在三层互联网架构的Web/应用层上，多年来向上扩展已经成为默认的扩展方式了。随着应用使用人数的激增，我们需要添加更多的服务器，性能则是通过负载均衡来实现的，这时的代价与用户数量成线性比例关系。在NoSQL数据库之前，数据库层的默认扩展方式就是向上扩展。为了支持更多的并发用户以及存储更多的数据，你需要越来越好的服务器，更好的CPU、更多的内存、更大的磁盘来维护所有表。然而，好的服务器意味着更加复杂、私有、并且也更加昂贵。这与Web/应用层所使用的便宜的硬件形成了鲜明的对比。

3.动态模式

关系型数据库需要在添加数据前先定义好模式。比如说，你需要存储客户的电话号码、姓名、地址、城市与州等信息，SQL数据库需要提前知晓你要存的是什么。这对于敏捷开发模式来说是场灾难，因为每次完成新特性时，数据库的模式通常都需要改变。因此，如果在开发过程中想将客户喜欢的条目加到数据库中，那就得向表中添加这一列才行，然后要做的就是将整个数据库迁移到新的模式上。

4.自动分片

由于是结构化的，关系型数据库通常会垂直扩展，单台服务器要持有整个数据库来确保可靠性与数据的持续可用性。这样做的代价就是非常昂贵、扩展受到限制，并且数据库基础设施会成为失败点。这个问题的解决方案就是水平扩展，添加服务器而不是为单台服务器增加更多的能力。NoSQL数据库通常都支持自动分片，这意味着他们本质上就会自动在多台服务器上分发数据，应用甚至都不知道这些事情。数据与查询负载会自动在多台服务器上做到平衡，当某台服务器当机时，它能快速且透明地被替换掉。

5.复制

大多数NoSQL数据库也支持自动复制，这意味着你可以获得高可用性与灾备恢复功能。从开发者的角度来看，存储环境本质上是虚拟化的。

NoSQL数据库面临的挑战

1.成熟度

RDBMS系统由来已久。NoSQL拥护者们会说RDBMS的高龄是其衰退的标志，不过对于大多数CIO来说，RDBMS的成熟让人放心。对于大多数情况来说，RDBMS系统是稳定且功能丰富的。相比较而言，大多数NoSQL数据库则还有很多特性有待实现。

2.支持

企业需要的是安心，如果关键系统出现了故障，他们可以获得即时的支持。所有RDBMS厂商都在不遗余力地提供良好的企业支持。与之相反，大多数NoSQL系统都是开源项目，虽然每种数据库都有那么几家公司提供支持，不过这些公司大多都是小的初创公司，没有全球支持资源，也没有Oracle、微软或是IBM那种令人放心的公信力。

3.分析与商业智能

NoSQL数据库在Web 2.0应用时代开始出现。因此，大多数特性都是面向这些应用的需要的。然而，应用中的数据对于业务来说是有价值的，这种价值远远超出了Web应用那种CRUD。企业数据库中的业务信息可以帮助改进效率并提升竞争力，商业智能对于大中型企业来说是个非常关键的IT问题。

4.管理

NoSQL的设计目标是提供零管理的解决方案，不过当今的现实却离这个目标还相去甚远。现在的NoSQL需要很多技巧才能用好，并且需要不少人力、物力来维护。

5.专业

全球有很多开发者，每个业务部门都会有熟悉RDBMS概念与编程的人。相反，几乎每个NoSQL开发者都处于学习模式。这种状况会随着时间的流逝而发生改观。但现在，找到一个有经验的RDBMS程序员或是管理员要比NoSQL专家容易多了。

结论

NoSQL数据库正在成为数据库领域的重要力量。如果使用恰当，那么它会带来很多好处。然而，企业应该非常小心并注意到这些数据库的限制与问题。